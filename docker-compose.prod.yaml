services:
  web:
    image: nginx:alpine
    container_name: molmedb-web-server
    restart: unless-stopped
    volumes:
     - mmdb-storage-production:/var/www
     - ./docker/production/nginx/nginx.conf:/etc/nginx/nginx.conf
    tty: true
    ports:
      - "9080:80"
      - "8443:443"
    networks:
      - mmdb-network
    depends_on:
      - app
        # condition: service_healthy 

  app:
    image: molmedb-app
    build:
      context: .
      dockerfile: ./docker/common/php-fpm/Dockerfile
      target: production
    restart: unless-stopped
    container_name: molmedb-app
    volumes:
      - ./:/var/www
      - mmdb-storage-production:/var/www/storage  
    env_file:
      - .env
    networks:
      - mmdb-network
    # healthcheck: // TODO
    #   test: ["CMD-SHELL", "php-fpm-healthcheck || exit 1"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 3
    depends_on:
      postgres:
        condition: service_healthy

  app-scheduler-worker:
    image: molmedb-app 
    container_name: molmedb-scheduler-worker
    tty: true
    environment:
      SERVICE_NAME: molmedb-scheduler-worker
      SERVICE_TAGS: dev
    working_dir: /var/www
    volumes:
      - ./:/var/www
    networks:
      - mmdb-network
    depends_on:
      - app
    command: php artisan schedule:work
    restart: unless-stopped 

  postgres:
    build: ./modules/bingo
    platform: linux/amd64
    privileged: true
    container_name: molmedb-db
    env_file: ./.env
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    shm_size: '8gb'
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${DB_USERNAME}", "-d", "${DB_DATABASE}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - mmdb-db:/var/lib/postgresql/data
    networks:
      - mmdb-network
  adminer:
    image: adminer
    container_name: molmedb-adminer
    restart: unless-stopped
    ports: 
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - mmdb-network

  # Currently not used by app
  # redis:
  #   image: redis:alpine
  #   restart: unless-stopped  # Automatically restart unless the service is explicitly stopped
  #   networks:
  #     - laravel-production
  #   # Health check for Redis
  #   # -----------------------------------------------------------
  #   # Checks if Redis is responding to the 'PING' command.
  #   # This ensures that the service is not only running but also operational.
  #   # -----------------------------------------------------------
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3

networks:
  mmdb-network:

volumes:
  mmdb-storage-production:
  mmdb-db: