services:
  web:
    image: nginx:alpine
    container_name: molmedb-nginx
    restart: unless-stopped
    volumes:
     - ./:/var/www
     - molmedb-storage-production:/var/www/storage
     - ./docker/production/nginx/nginx.conf:/etc/nginx/nginx.conf
    tty: true
    ports:
      - "8443:443"
    networks:
      - molmedb-network
    depends_on:
      - app
        # condition: service_healthy 

  app:
    image: molmedb-backend
    user: "www-data"
    build:
      context: .
      dockerfile: ./docker/common/php-fpm/Dockerfile
      target: production
    restart: unless-stopped
    container_name: molmedb-backend
    volumes:
      - ./:/var/www
      - molmedb-storage-production:/var/www/storage
      - /var/www/bootstrap
    env_file:
      - .env
    environment:
      # - APP_ENV=production
      # - APP_DEBUG=false
      - FRONTEND_URL=http://frontend:3000 
    networks:
      - molmedb-network
    # healthcheck: // TODO
    #   test: ["CMD-SHELL", "php-fpm-healthcheck || exit 1"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 3
    depends_on:
      db:
        condition: service_healthy

  app-scheduler-worker:
    image: molmedb-backend 
    container_name: molmedb-scheduler-worker
    tty: true
    env_file:
      - .env
    environment:
      - SERVICE_TAGS=dev
      - SERVICE_NAME=molmedb-scheduler-worker
    working_dir: /var/www
    volumes:
      - ./:/var/www
      - /var/www/bootstrap
    networks:
      - molmedb-network
    depends_on:
      - app
    command: php artisan schedule:work
    restart: unless-stopped 

  # frontend:
  #   container_name: molmedb-frontend
  #   build:
  #     context: ./frontend/src
  #     dockerfile: ../../docker/production/frontend/Dockerfile
  #   restart: unless-stopped
  #   networks:
  #     - molmedb-network
  #   env_file:
  #     - .env
  #   environment:
  #     #if you???re using Windows, you may need to uncomment the next line - Sol from @Kobe E
  #     # - WATCHPACK_POLLING=true
  #     - NEXT_PUBLIC_BACKEND_URL=http://web:443
  #     - NODE_ENV=production
  #   ports:
  #     - 3000:3000
  #   depends_on:
  #     - app


  db:
    build: ./database/extensions/bingo
    platform: linux/amd64
    privileged: true
    container_name: molmedb-dev-db
    env_file: ./.env
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5433:5432"
    shm_size: '8gb'
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${DB_USERNAME}", "-d", "${DB_DATABASE}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - molmedb-db:/var/lib/postgresql/data
    networks:
      - molmedb-network

  adminer:
    image: adminer
    container_name: molmedb-adminer
    restart: unless-stopped
    ports: 
      - "8080:8080"
    depends_on:
      - db
    networks:
      - molmedb-network

  

volumes:
  molmedb-storage-production:
  molmedb-db:

networks:
  molmedb-network:


